MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2014 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Saturday May 17, 2014 at 2:39:25 AM
  Release 9.2 || Microcode 15.3 || Runtime 15.7 || SF 4.41 || LIAR/x86-64 4.118
  Edwin 3.116

1 ]=> (load "load")
;Loading "load.scm"...
;  Loading "ghelper.scm"... done
;  Loading "matcher.scm"... done
;  Loading "utils.scm"... done
;  Loading "rule-implementation.scm"... done
;  Loading "rules.scm"... done
;  Loading "pattern-operator.scm"... done
;... done
;Value: attach-rule!

1 ]=> (define group-axioms
   (list
    ;; Associative law of addition
    (rule '( (?? a) (?? b))
	  `( ,@a ,1 ,@b ))
    (rule '( (?? a) 1 (?? b))
	  `( ,@a  ,@b ))
    (rule '( (?? a) (?? c) (- (?? c)) (?? b))
	  `( ,@a ,1 ,@b ))
    (rule '( (?? a) (- (?? c)) (?? c) (?? b))
	  `( ,@a ,1 ,@b ))))
;Value: group-axioms

1 ]=> ;;(pp (try-rules '(a) assumptions 
;;	       (lambda (result fail)
;;	       (pp result)
;;		 )
;;	       (lambda () #f)
;;	       )) 

(define (try-push outcome start results)
	(pp "try to push")
	(pp outcome)
  	(pp results)
	(let* ((story (cons start (cadr (assoc start results))))
	       (n-story (length story))
		(old-vcell (assoc outcome results)))
	       (if old-vcell
		(let* ((old-story (cadr old-vcell))
		       (n-old-story (length old-story)))
		   (if (< n-story n-old-story)
			(cons (list outcome story) results)
			results))
		(cons (list outcome story) results)  )))
;Value: try-push

1 ]=> (define (deduce vars starters assumptions results)
  (define gen-assumptions
    (append 
     assumptions
  (let per-var ((vars  vars)
		(new-assumptions '())) 
	(if (pair? vars)
	  (per-var  (cdr vars) 
		   (cons (rule '( (?? a) 1 (?? b))
			       `( ,@a ,(car vars) (- ,(car vars)) ,@b ))
		    (cons
		     	(rule '( (?? a) 1 (?? b))
	  		`( ,@a (- ,(car vars)) ,(car vars) ,@b ))
		     new-assumptions)) )
	  new-assumptions
	 )	
    )))
  (let per-start ((starters starters)
		  (assumptions gen-assumptions)
		  (results results))
    	(pp "per-start")
	(if (pair? starters)
	  (let per-assumption ((start (car starters))
			(new-starters (cdr starters))
			(assumptions assumptions)
			(current-assumptions assumptions)
			(results results))
	    	(pp "per-assumption")
	    	(if (pair? current-assumptions)
		  ((car current-assumptions) start
				     (lambda (outcome f)
				     (per-assumption start new-starters assumptions (cdr current-assumptions ) (try-push outcome start results)))
				     (lambda () 
				      (per-assumption start new-starters assumptions (cdr current-assumptions ) results)))
		  (per-start new-starters assumptions results)))
	  results)))
;Value: deduce

1 ]=> (define hypothesis
   (list (rule '((?? x) a b (?? y))
	 `( ,@x a c ,@y ))))
;Value: hypothesis

1 ]=> (define assumptions
   (append group-axioms hypothesis))
;Value: assumptions

1 ]=> (define theorem
  '((a) (c))
  )
;Value: theorem

1 ]=> (define (proof variables assumptions  theorem-start theorem-end)
  	
 	(let lp ((starters `(,theorem-start))
		(end theorem-end)
		(assumptions assumptions)
		(variables variables)
		(results `((,theorem-start ()))))
		(let* ((new-results (deduce variables starters assumptions results))
		       (vcell (assoc end results)))
			(if vcell
			  (cadr vcell)
			  (lp (map car results) end assumptions variables new-results)
			  )
		)))
;Value: proof

1 ]=> (pp (proof '(a b c) assumptions '((- a) a c) '(c)))"per-start"
"per-assumption"
"try to push"
(1 (- a) a c)
((((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"try to push"
(1 c)
(((1 (- a) a c) (((- a) a c))) (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-start"
"per-start"
"per-assumption"
"try to push"
(1 (- a) a c)
(((1 c) (((- a) a c))) ((1 (- a) a c) (((- a) a c))) (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"try to push"
(1 c)
(((1 c) (((- a) a c))) ((1 (- a) a c) (((- a) a c))) (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-start"
"per-start"
"per-assumption"
"try to push"
(1 1 c)
(((1 c) (((- a) a c))) ((1 (- a) a c) (((- a) a c))) (((- a) a c) ()))
"per-assumption"
"try to push"
(c)
(((1 1 c) ((1 c) ((- a) a c))) ((1 c) (((- a) a c)))
                               ((1 (- a) a c) (((- a) a c)))
                               (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"try to push"
(c (- c) c)
(((c) ((1 c) ((- a) a c))) ((1 1 c) ((1 c) ((- a) a c)))
                           ((1 c) (((- a) a c)))
                           ((1 (- a) a c) (((- a) a c)))
                           (((- a) a c) ()))
"per-assumption"
"try to push"
((- c) c c)
(((c (- c) c) ((1 c) ((- a) a c))) ((c) ((1 c) ((- a) a c)))
                                   ((1 1 c) ((1 c) ((- a) a c)))
                                   ((1 c) (((- a) a c)))
                                   ((1 (- a) a c) (((- a) a c)))
                                   (((- a) a c) ()))
"per-assumption"
"try to push"
(b (- b) c)
((((- c) c c) ((1 c) ((- a) a c))) ((c (- c) c) ((1 c) ((- a) a c)))
                                   ((c) ((1 c) ((- a) a c)))
                                   ((1 1 c) ((1 c) ((- a) a c)))
                                   ((1 c) (((- a) a c)))
                                   ((1 (- a) a c) (((- a) a c)))
                                   (((- a) a c) ()))
"per-assumption"
"try to push"
((- b) b c)
(((b (- b) c) ((1 c) ((- a) a c))) (((- c) c c) ((1 c) ((- a) a c)))
                                   ((c (- c) c) ((1 c) ((- a) a c)))
                                   ((c) ((1 c) ((- a) a c)))
                                   ((1 1 c) ((1 c) ((- a) a c)))
                                   ((1 c) (((- a) a c)))
                                   ((1 (- a) a c) (((- a) a c)))
                                   (((- a) a c) ()))
"per-assumption"
"try to push"
(a (- a) c)
((((- b) b c) ((1 c) ((- a) a c))) ((b (- b) c) ((1 c) ((- a) a c)))
                                   (((- c) c c) ((1 c) ((- a) a c)))
                                   ((c (- c) c) ((1 c) ((- a) a c)))
                                   ((c) ((1 c) ((- a) a c)))
                                   ((1 1 c) ((1 c) ((- a) a c)))
                                   ((1 c) (((- a) a c)))
                                   ((1 (- a) a c) (((- a) a c)))
                                   (((- a) a c) ()))
"per-assumption"
"try to push"
((- a) a c)
(((a (- a) c) ((1 c) ((- a) a c))) (((- b) b c) ((1 c) ((- a) a c)))
                                   ((b (- b) c) ((1 c) ((- a) a c)))
                                   (((- c) c c) ((1 c) ((- a) a c)))
                                   ((c (- c) c) ((1 c) ((- a) a c)))
                                   ((c) ((1 c) ((- a) a c)))
                                   ((1 1 c) ((1 c) ((- a) a c)))
                                   ((1 c) (((- a) a c)))
                                   ((1 (- a) a c) (((- a) a c)))
                                   (((- a) a c) ()))
"per-assumption"
"per-start"
"per-assumption"
"try to push"
(1 1 (- a) a c)
(((a (- a) c) ((1 c) ((- a) a c))) (((- b) b c) ((1 c) ((- a) a c)))
                                   ((b (- b) c) ((1 c) ((- a) a c)))
                                   (((- c) c c) ((1 c) ((- a) a c)))
                                   ((c (- c) c) ((1 c) ((- a) a c)))
                                   ((c) ((1 c) ((- a) a c)))
                                   ((1 1 c) ((1 c) ((- a) a c)))
                                   ((1 c) (((- a) a c)))
                                   ((1 (- a) a c) (((- a) a c)))
                                   (((- a) a c) ()))
"per-assumption"
"try to push"
((- a) a c)
(((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"try to push"
(1 1 c)
(((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"try to push"
(c (- c) (- a) a c)
(((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- c) c (- a) a c)
(((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
(b (- b) (- a) a c)
((((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- b) b (- a) a c)
(((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
(a (- a) (- a) a c)
((((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- a) a (- a) a c)
(((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-start"
"per-assumption"
"try to push"
(1 (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"try to push"
(1 c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-start"
"per-start"
"per-assumption"
"try to push"
(1 1 c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
(c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"try to push"
(c (- c) c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- c) c c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
(b (- b) c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- b) b c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
(a (- a) c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-start"
"per-assumption"
"try to push"
(1 1 (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"try to push"
(1 1 c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"try to push"
(c (- c) (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- c) c (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
(b (- b) (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- b) b (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
(a (- a) (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"try to push"
((- a) a (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-start"
"per-assumption"
"try to push"
(1 (- a) a c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"try to push"
(1 c)
((((- a) a (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- b) b (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((b (- b) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 (((- c) c (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((c (- c) (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((1 1 (- a) a c) ((1 (- a) a c) ((- a) a c)))
 ((a (- a) c) ((1 c) ((- a) a c)))
 (((- b) b c) ((1 c) ((- a) a c)))
 ((b (- b) c) ((1 c) ((- a) a c)))
 (((- c) c c) ((1 c) ((- a) a c)))
 ((c (- c) c) ((1 c) ((- a) a c)))
 ((c) ((1 c) ((- a) a c)))
 ((1 1 c) ((1 c) ((- a) a c)))
 ((1 c) (((- a) a c)))
 ((1 (- a) a c) (((- a) a c)))
 (((- a) a c) ()))
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-assumption"
"per-start"
((1 c) ((- a) a c))
;Unspecified return value

1 ]=> 
End of input stream reached.
Moriturus te saluto.
